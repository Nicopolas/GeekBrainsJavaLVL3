/auth_request§login§password
/auth_accept§nickname
/auth_error
/broadcast§timestamp§src§message
/msg_format_error§message
/user_list§user1§user2...

1. просьба максимально подробно, со слайдами, расжевать механизм определения и объявления листнеров. Зачем это реализованно через интерфейсы (правильно ли я понял, что для мастшабируемости и универсальности).

1. Почему в случае, когда при подключенном клиенте мы вырубаем сервер (закрываем серверное приложение), клиент вылетает с ошибкой, а в случае, когда просто останавливаем сервер (посредством кнопки стоп) клиент продолжает работать и даже отправляет и принимает сообщения? Серверный поток ждет пока все клиенты отключатся и тогда прервется?
2. ClientThread включен в модуль Chat_Server, а не в network, чтобы "обезличить" модуль network и сделать его универсальным для работы с какими-то другими возможными модулями? :)

Не нужно ли класс Messages тоже сделать абстрактным?

1. Почему при дисконекте(кнопка Disconneckt) со стороны клиента мы закрываем поток, а не сам сокет?
2. Сколько сокетов может создать сервер? Есть какой то лимит нагрузки на сервер?
Правильно ли я понял, что после .accept() сокет отдается в поток и серверу без разницы что произойдет дальше с сокетом?
3. При помощи сущности Statement мы можем производить с бд любые sql запросы? Напримеро добавление в бд(реализация регистрации)?
4. В какой момент мы начинаем использовать наш класс Messages? Где происходит первичное обращение к геттерам содержащимся в этом классе?
Если честно, по классу Messages слабо уловил сють происходящего.
Например как использовать public static String getTypeBroadcast при отправки всем клиентам в чате.
Пожалуй взаимодействие с классом Messages вызывает больше непонимания, чем все остальное.

Давно хотел задать вопрос почему вы класс прячете в таком большом кол-ве пакетов, ру потом гикбрейнс и т.д., это имеет какой-то смысл или это просто часть маркетингового хода чтоб гикбрейнс запомнилось?

Иногда клиент отваливает от  сервера совсем незаметно, без всяких Exceptions (это касается в первую очередь мобильных клиентов) как быть в подобных ситуациях?

Хотелось бы просто ещё раз потом пройти по всему написанному.
